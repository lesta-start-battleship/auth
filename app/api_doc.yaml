openapi: "3.0.0"
info:
  title: API для регистрации, авторизации и работы с пользовательскими данными в игре "Морской бой"

paths:
  /api/v1/auth/registration/:
    post:
      tags:
        - Auth
      operationId: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegRequest'
      responses:
        201:
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully, email confirmation required"
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid data"
        409:
          description: Пользователь с таким email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User already exists"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/auth/login/:
    post:
      tags:
        - Auth
      operationId: Авторизация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        200:
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid data"
        401:
          description: Неверный пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid password"
        403:
          description: Email пользователя не подтвержден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User's email is not confirmed"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/auth/link/google:
    get:
      tags:
        - Auth
      operationId: getGoogleAuthLink
      summary: Получение демо-ссылки для авторизации через Google
      description: ⚠️ Этот эндпоинт используется **для демонстрационных целей**, чтобы показать процесс авторизации через Google. Он предоставляет ссылку, по которой можно пройти Google OAuth-авторизацию в браузере.
      responses:
        200:
          description: Успешное получение ссылки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGoogleLoginResponse'

  /api/v1/auth/link/yandex:
    get:
      tags:
        - Auth
      operationId: getYandexAuthLink
      summary: Получение демо-ссылки для авторизации через Yandex
      description: ⚠️ Этот эндпоинт используется **для демонстрационных целей**, чтобы показать процесс авторизации через Yandex. Он предоставляет ссылку, по которой можно пройти Yandex OAuth-авторизацию в браузере.
      responses:
        200:
          description: Успешное получение ссылки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserYandexLoginResponse'

  /api/v1/auth/yandex/device/init:
    post:
      tags:
        - Auth
      operationId: initYandexDeviceLogin
      summary: Инициализация Yandex авторизации через устройство
      description: Этот эндпоинт инициирует процесс авторизации через устройство для пользователей Yandex. Он возвращает `device_code`, ссылку для авторизации (`verification_url`), время жизни кода (`expires_in`) и интервал (`interval`) для последующих проверок. Пользователь должен перейти по verification_url и авторизоваться.
      responses:
        200:
          description: Успешная инициализация авторизации через устройство
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YandexDeviceInitResponse'

  /api/v1/auth/yandex/device/check:
    post:
      tags:
        - Auth
      operationId: checkYandexDeviceLogin
      summary: Проверка статуса Yandex авторизации через устройство
      description: >
        Клиент (в нашем случае CLI) отправляет `device_code`, чтобы узнать статус авторизации текущего пользователя через Yandex. 
        Возможные ответы: `authenticated` (авторизация прошла успешно, возвращаются токены и данные пользователя), `pending` (пользователь еще не завершил авторизацию), `expired` (время действия кода авторизации истекло), `error` (код неверный или отсутствует).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YandexDeviceCheckRequest'
      responses:
        200:
          description: Авторизация успешно подтверждена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YandexDeviceCheckResponseSuccess'
        400:
          description: Неверный или истекший device_code (или вовсе отсутствует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YandexDeviceCheckResponseError'
        428:
          description: Авторизация еще не завершена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YandexDeviceCheckResponsePending'

  /api/v1/auth/google/device/init:
    post:
      tags:
        - Auth
      operationId: initGoogleDeviceLogin
      summary: Инициализация Google авторизации через устройство
      description: Этот эндпоинт инициирует процесс авторизации через устройство для пользователей Google. Он возвращает `device_code`, `user_code`, ссылку для авторизации (verification_url), время жизни кода (`expires_in`) и интервал (`interval`) для последующих проверок. Пользователь должен перейти по verification_url и авторизоваться.
      responses:
        200:
          description: Успешная инициализация авторизации через устройство
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDeviceInitResponse'
        500:
          description: Google не вернул необходимые данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Device-based authentication is currently unavailable"

  /api/v1/auth/google/device/check:
    post:
      tags:
        - Auth
      operationId: checkGoogleDeviceLogin
      summary: Проверка статуса Google авторизации через устройство
      description: >
        Клиент (в нашем случае CLI) отправляет `device_code`, чтобы узнать статус авторизации текущего пользователя через Google.  
        Возможные ответы: `authenticated` (авторизация прошла успешно, возвращаются токены и данные пользователя), `pending` (пользователь еще не завершил авторизацию), `expired` (время действия кода авторизации истекло), `denied` (пользователь отказался от авторизации), `error` (код неверный или отсутствует).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleDeviceCheckRequest'
      responses:
        200:
          description: Авторизация успешно подтверждена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDeviceCheckResponseSuccess'
        400:
          description: Неверный код, его срок действия истек, или пользователь отказался от авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDeviceCheckResponseError'
        428:
          description: Авторизация еще не завершена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDeviceCheckResponsePending'

        502:
          description: Нет id_token в ответе от Google
          content:
            application/json:
              example:
                error: "No ID token provided"

  /api/v1/auth/refresh_token/:
    post:
      tags:
        - Auth
      operationId: Обновление access токена
      description: При запросе необходимо передать refresh токен в заголовке Authorization "Bearer <token>"
      security:
        - jwt: []
      headers:
        Authorization:
          required: true
          content:
            application/json:
              schema:
                type: string
                format: jwt
                description: Refresh JWT токен
                example: "Bearer <token>"
      responses:
        200:
          description: Успешное обновление access токена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid data"
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/auth/confirm_email/{code}:
    get:
      tags:
        - Auth
      operationId: Подтверждение email
      parameters:
        - name: code
          in: path
          required: true
          description: Код подтверждения
          schema:
            type: string
      responses:
        200:
          description: Успешное подтверждение email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmEmailResponse'
        400:
          description: Неверный код подтверждения или код истек
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid code or code expired"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        409:
          description: Пользователь уже подтвержден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User already confirmed"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/users/{user_id}:
    get:
      tags:
        - User
      operationId: Получение пользователя
      security:
        - jwt: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: integer
      responses:
        200:
          description: Успешное получение пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        403:
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Permission denied"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"
    patch:
      tags:
        - User
      operationId: Обновление пользователя
      security:
        - jwt: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest' 
      responses:
        200:
          description: Успешное обновление пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

              example:
                error: "Invalid data"
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        403:
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Permission denied"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"
    delete:
      tags:
        - User
      operationId: Удаление пользователя
      security:
        - jwt: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: integer
      responses:
        204:
          description: Успешное удаление пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        403:
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Permission denied"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/users/logout/:
    post:
      tags:
        - User
      operationId: Выход пользователя
      security:
        - jwt: []
      responses:
        200:
          description: Успешное выход пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access token revoked"
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/users/:
    get:
      tags:
        - Users
      operationId: Получение списка пользователей
      security:
        - jwt: []
      parameters:
        - name: user_ids
          in: query
          required: true
          description: Список id пользователей
          schema:
            type: array
            items:
              type: integer
            example: [1, 2, 3]

      responses:
        200:
          description: Успешное получение списка пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersListResponse'
        400:
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid data"
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

  /api/v1/currencies/:
    get:
      tags:
        - Currencies
      operationId: Получение списка валют
      security:
        - jwt: []
      responses:
        200:
          description: Успешное получение списка валют
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCurrenciesResponse'
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

    patch:
      tags:
        - Currencies
      operationId: Обновление валюты
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCurrencyRequest'
      responses:
        200:
          description: Успешное обновление валюты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserCurrencyResponse'
        401:
          description: Неавторизованный доступ (JWT не предоставлен или недействителен)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not authorized"
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        500:
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Internal server error"

components:
  securitySchemes:
    jwt:
      type: "apiKey"
      name: "Authorization"
      in: "header"

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string

    UserRegRequest:
      type: object
      properties:
        username:
          type: string
          example: "Nagibator2000"
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          description: Пароль должен содержать хотя бы одну заглавную букву, одну строчную букву и одну цифру, длина не менее 8 символов
          example: "Password123456"
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"

    UserGoogleLoginResponse:
      type: object
      required:
        - google_url
      properties:
        google_link:
          type: string
          example: https://domain.com/api/v1/auth/login/google

    UserYandexLoginResponse:
      type: object
      required:
        - yandex_link
      properties:
        yandex_link:
          type: string
          example: https://domain.com/api/v1/auth/login/yandex

    YandexDeviceInitResponse:
      type: object
      required:
        - device_code
        - verification_url
        - expires_in
        - interval
      properties:
        device_code:
          type: string
          example: "9a8f3c6a7e1d4c5fbf5c91d45831e8c7"
        verification_url:
          type: string
          example: "https://oauth.yandex.ru/authorize?device_code=xyz..."
        expires_in:
          type: integer
          example: 600
        interval:
          type: integer
          example: 5

    YandexDeviceCheckRequest:
      type: object
      required:
        - device_code
      properties:
        device_code:
          type: string
          example: "9a8f3c6a7e1d4c5fbf5c91d45831e8c7"

    YandexDeviceCheckResponseSuccess:
      type: object
      required:
        - access_token
        - refresh_token
        - status
        - user
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        status:
          type: string
          example: "authenticated"
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "Nagibator2000"
            email:
              type: string
              example: "user@example.com"
            currencies:
              type: object
              properties:
                guild_rage:
                  type: integer
                  example: 15
                gold:
                  type: integer
                  example: 100

    YandexDeviceCheckResponseError:
      type: object
      properties:
        error:
          type: string
          example: "Code is invalid"
        status:
          type: string
          example: "error"

    YandexDeviceCheckResponsePending:
      type: object
      properties:
        status:
          type: string
          example: "pending"

    GoogleDeviceInitResponse:
      type: object
      required:
        - device_code
        - user_code
        - verification_url
        - expires_in
        - interval
      properties:
        device_code:
          type: string
          example: "AH-1Ng1oKcVYT97I0FQGmLOuyjDiOZWX467jCrtWNMkp_HS-EyxrMbOsjdCMuzQsAK2ZDurPpdYVZBPuIrmUeAYpHIHwunluTA"
        user_code:
          type: string
          example: "MCC-ZBZ-HDX"
        verification_url:
          type: string
          example: "https://www.google.com/device"
        expires_in:
          type: integer
          example: 1800
        interval:
          type: integer
          example: 5

    GoogleDeviceCheckRequest:
      type: object
      required:
        - device_code
      properties:
        device_code:
          type: string
          example: "MCC-ZBZ-HDX"

    GoogleDeviceCheckResponseSuccess:
      type: object
      required:
        - access_token
        - refresh_token
        - status
        - user
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        status:
          type: string
          example: "authenticated"
        user:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            email:
              type: string
            currencies:
              type: object
              properties:
                guild_rage:
                  type: integer
                gold:
                  type: integer

    GoogleDeviceCheckResponseError:
      type: object
      properties:
        error:
          type: string
          example: "Code is invalid"
        status:
          type: string
          example: "denied"

    GoogleDeviceCheckResponsePending:
      type: object
      properties:
        status:
          type: string
          example: "pending"

    UserLoginResponse:
      schema:
        $ref: '#/components/schemas/UserRegResponse'

    UserRegResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    ConfirmEmailResponse:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/UserLoginResponse'
    UserLoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "Nagibator2000"
        password:
          type: string
          example: "Password123456"

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    GetUserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "user@example.com"
        username:
          type: string
          example: "Nagibator2000"
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        role:
          type: string
          example: "user"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-06-30 23:05:53.889"
        currencies:
          type: object
          properties:
            id:
              type: integer
              example: 1
            gold:
              type: integer
              example: 100
            guild_rage:
              type: integer
              example: 15

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        username:
          type: string
          example: "Nagibator2000"
        password:
          type: string
          description: Пароль должен содержать хотя бы одну заглавную букву, одну строчную букву и одну цифру, длина не менее 8 символов
          example: "Password123456"
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Doe"
        role:
          type: string
          example: "user"

    UpdateUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/GetUserResponse'

    GetUsersListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/GetUserResponse'

    GetUserCurrenciesResponse:
      type: object
      properties:
        gold:
          type: integer
          example: 100
        guild_rage:
          type: integer
          example: 15

    UpdateUserCurrencyRequest:
      type: object
      properties:
        gold:
          type: integer
          example: 100
        guild_rage:
          type: integer
          example: 15

    UpdateUserCurrencyResponse:
      type: object
      schema:
        $ref: '#/components/schemas/GetUserCurrenciesResponse'

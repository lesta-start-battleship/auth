networks:
    app_network:
        name: app_network

volumes:
    redis_data:
    postgres_data:

services:

    postgres:
        image: postgres:15.4
        restart: always
        env_file:
        - .env
        environment:
            POSTGRES_USER: $POSTGRES_USER
            POSTGRES_PASSWORD: $POSTGRES_PASSWORD
            POSTGRES_DB: $POSTGRES_DB
        volumes:
        - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "tf_idf_db"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app_network
    
    app:
        build: .
        command: bash -c "alembic upgrade heads && python main.py"
        env_file:
        - .env
        volumes:
        - .env:/app/.env
        depends_on:
            - postgres
            - redis
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5000/"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app_network
    
    nginx:
        image: nginx:1.21
        ports:
        - "80:80"
        depends_on:
        - app
        networks:
            - app_network
    
    redis:
        image: "redis:alpine"
        volumes:
            - redis_data:/data
        networks:
            - app_network
    
    kafka:
        image: "bitnami/kafka:latest"
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        networks:
            - app_network